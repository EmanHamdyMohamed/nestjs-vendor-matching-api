version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vendor-matching-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MONGODB_URI=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-adminpassword}@mongodb:27017/${MONGO_DATABASE:-vendor_matching}?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=3000
    depends_on:
      - mysql
      - mongodb
      - redis
    networks:
      - vendor-matching-network
    volumes:
      - .:/app
      - /app/node_modules

  mysql:
    image: mysql:8.0
    container_name: vendor-matching-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-vendor_matching}
      MYSQL_USER: ${MYSQL_USER:-vendor_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-vendor_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - vendor-matching-network
    command: --default-authentication-plugin=mysql_native_password

  mongodb:
    image: mongo:7.0
    container_name: vendor-matching-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-adminpassword}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-vendor_matching}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo/init:/docker-entrypoint-initdb.d
    networks:
      - vendor-matching-network

  redis:
    image: redis:7.2-alpine
    container_name: vendor-matching-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vendor-matching-network
    command: redis-server --appendonly yes

volumes:
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  vendor-matching-network:
    driver: bridge
